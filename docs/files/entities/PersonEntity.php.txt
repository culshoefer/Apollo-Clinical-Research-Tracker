<?php
/**
 * @author Christoph Ulshoefer <christophsulshoefer@gmail.com>
 * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>
 * @copyright 2016
 * @license http://opensource.org/licenses/mit-license.php MIT License
 */
namespace Apollo\Entities;
use Doctrine\ORM\Mapping\Column;
use Doctrine\ORM\Mapping\Entity;
use Doctrine\ORM\Mapping\JoinColumn;
use Doctrine\ORM\Mapping\JoinColumns;
use Doctrine\ORM\Mapping\JoinTable;
use Doctrine\ORM\Mapping\Id;
use Doctrine\ORM\Mapping\ManyToOne;
use Doctrine\ORM\Mapping\OneToMany;
use Doctrine\ORM\Mapping\OrderBy;
use Doctrine\Common\Collections\ArrayCollection;
use Illuminate\Support\Arr;

/**
 * Class PersonEntity
 * @package Apollo\Entities
 * @author Christoph Ulshoefer <christophsulshoefer@gmail.com>
 * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>
 * @version 0.0.7
 * @Entity @Table("people")
 */
class PersonEntity
{
    /**
     * Unique Person id
     * @Id @Column(type="integer", name="id")
     * @GeneratedValue(strategy="AUTO")
     * @var int
     */
    protected $id;
    /**
     * Name of the person
     * @Column(type="string")
     * @var string
     */
    protected $given_name;
    /**
     * Middle Name of the person
     * @Column(type="string")
     * @var string
     */
    protected $middle_name;
    /**
     * Last name of the person
     * @Column(type="string")
     * @var string
     */
    protected $last_name;
    /**
     * Organisation object
     * @ManyToOne(targetEntity="OrganisationEntity")
     * @var OrganisationEntity
     */
    protected $organisation;
    /**
     * Array with all of the records
     * @OneToMany(targetEntity="RecordEntity", mappedBy="person")
     * @var RecordEntity[]
     */
    protected $records;
    /**
     * Array with all the activities of one person
     * @ManyToMany(targetEntity="ActivityEntity",  inversedBy="person")
     * @JoinTable(
     *     name="personentity_activityentity",
     *     joinColumns={
     *     @JoinColumn(name="personentity_id", referencedColumnName="id")
     * },
     * inverseJoinColumns={@JoinColumn(name="activityentity_id", referencedColumnName="id")}
     * )
     * @var \Doctrine\Common\Collections\ArrayCollection|ActivityEntity[]
     */
    protected $activities;
    /**
     * Determines if person is shown or not
     * @Column(type="boolean")
     * @var bool
     */
    protected $is_hidden = false;

    public function __construct()
    {
        $this->activities = new ArrayCollection();
        $this->is_hidden = false;
    }
    /**
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }
    /**
     * @return string
     */
    public function getGivenName()
    {
        return $this->given_name;
    }
    /**
     * @param string $given_name
     */
    public function setGivenName($given_name)
    {
        $this->given_name = $given_name;
    }
    /**
     * @return string
     */
    public function getMiddleName()
    {
        return $this->middle_name;
    }
    /**
     * @param string $middle_name
     */
    public function setMiddleName($middle_name)
    {
        $this->middle_name = $middle_name;
    }
    /**
     * @return string
     */
    public function getLastName()
    {
        return $this->last_name;
    }
    /**
     * @param string $last_name
     */
    public function setLastName($last_name)
    {
        $this->last_name = $last_name;
    }
    /**
     * @return OrganisationEntity
     */
    public function getOrganisation()
    {
        return $this->organisation;
    }
    /**
     * @param OrganisationEntity $organisation
     */
    public function setOrganisation($organisation)
    {
        $this->organisation = $organisation;
    }
    /**
     * @return RecordEntity[]
     */
    public function getRecords()
    {
        return $this->records;
    }
    /**
     * @param RecordEntity $record
     */
    public function addRecord($record)
    {
        $this->records[] = $record;
    }
    /**
     * @return boolean
     */
    public function isHidden()
    {
        return $this->is_hidden;
    }
    /**
     * @param boolean $is_hidden
     */
    public function setIsHidden($is_hidden)
    {
        $this->is_hidden = $is_hidden;
    }

    /**
     * @param ActivityEntity $activity
     */
    public function addActivity(ActivityEntity $activity)
    {
        if(!$this->hasActivity($activity)) {
            $this->activities->add($activity);
            $activity->addPerson($this);
        }
    }

    /**
     * @param ActivityEntity $activity
     */
    public function removeActivity(ActivityEntity $activity)
    {
        if($this->hasActivity($activity)) {
            $this->activities->removeElement($activity);
            $activity->removePerson($this);
        }
    }

    /**
     * @return ActivityEntity[]
     */
    public function getActivities()
    {
        return $this->activities;
    }

    private function hasActivity($activity)
    {
        if(!$this->getActivities() || empty($this->getActivities()))
            return false;
        else
            return $this->activities->contains($activity);
    }
}
